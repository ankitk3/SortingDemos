package com.ankit.LeetCodeMayChallenge;

/**
 * Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
 *
 * Note:
 * The length of num is less than 10002 and will be â‰¥ k.
 * The given num does not contain any leading zero.
 * Example 1:
 *
 * Input: num = "1432219", k = 3
 * Output: "1219"
 * Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
 * Example 2:
 *
 * Input: num = "10200", k = 1
 * Output: "200"
 * Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
 * Example 3:
 *
 * Input: num = "10", k = 2
 * Output: "0"
 * Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 */
public class May13Problem {
    public String removeKdigits(String num, int k) {
        if(num == null || num.length() == 0 || k >= num.length()){
            return "0";
        }
        String tempStr = num;
        for(int j =0;j < k;j++){
            boolean isLapsed = false;
            StringBuilder sb = new StringBuilder();
            for(int i= 0; i< tempStr.length();i++){
                if(isLapsed){
                    sb.append(tempStr.charAt(i));
                } else if(!isLapsed && i == tempStr.length()-1){
                    isLapsed = true;
//                    continue;
                } else if(Character.getNumericValue(tempStr.charAt(i)) <= Character.getNumericValue(tempStr.charAt(i+1))){
                    sb.append(tempStr.charAt(i));
                }
                else{
                    isLapsed = true;
                }
            }
            tempStr = sb.toString();

        }
        int index = 0;
        for(index=0;index < tempStr.length();index++){
            if(tempStr.charAt(index) != '0'){
                break;
            }
        }
        tempStr = tempStr.substring(index,tempStr.length());
        if(tempStr.length() == 0){
            return "0";
        }
        return tempStr;
    }

    public static void main(String[] args) {
        May13Problem obj = new May13Problem();
//        String input = "100";
        String input = "996414363788153611534713021581934201828636847894114849949764848271145953346100425440564423705308160608336170309768131340987930561551032020085493444465193544083073070710550651127384420202284715693947961741503230801612259019643388373415242532432185095002546192236830917993656777205823895681565852256661971230933778711000024814024862198372554113821624993211934165249722752734719691558487424574765564337372811477100217812101347653217612856122765119173245525855698821566350946703626535675961447286537950070232309338175661044886376964501660879051008236994257987635984443260693570528423799185358552969157600544593174335218787781718110810765931666630909480297931136268524627123881164837747134261839114812308843935942493318281655037982696342444307736930338827080002496328501487998593220246931465776355431146576624189988605175259891929732507016317655984650530976168048173443438950167245619478608361175049157970111851326742552782365977460421387684737230598259483015657194376107329076625454990429534998668137411573010033710052009923142650775310294379489312556171534171488223559283185985175332417196410027122048741610016042692165669282207674747131355167179974913633602047641542649890046713635410974334848221184836421075476585814506168217699647670325211388515708227291347624600142654332272017247240043384945523972800905681647861097215714362061983828148490338569873387874733357726669332188108224828489946104917056651555163847994594185945591368279411063876895016418511017432985825754663038649066737884966282889208674221939501808101313966129138511125938076491529720682792999341134636697145756136459293656529218088367256823900260755593209957048801497645833796975053034745500290598281168364692033704284493304422815631355689357426692433442186039944179557034850598621323596887762903782103929553107858745282052037885597154938524059913802902742681435579703984418511579775206894404302651440297897885110427958791745673813585106947495129389346879793050991495754642206298049425505641647868088568978098638241216595480343955397354070692794576786139092223718488922947549332990911646568710862690843245295125447474341235471897299937583376220380986994488157016449346512927190676832277274388089559695435423191978835673697338673642503531366978651071822829296559183622118323278275713547875356115017319438561550038537323398195949395247191695611106985716765623293608032822154675340585047281277315155989411436378270109555790924514058213521267065504383151760496923162104908997026130787025357167359018061715228530210355973167033904785714856779982079227739388293714608386112144464175289135752847767378370464396954085234344149163429796888201978364586376949915409982916903451942054524392398273829530398103677122445901559403943875549117866524781119542971855441063841745924516808750837378747358100687678662149246348855138288088801619309872766025708728607521198130424145503963584338935927775417566732068828767467317077669662680961043200619379135058930288335921375403960643751555139797647281809270830604811275221182400261406256473137839010739384192402499290009627220342739526836359195401697322208549781013081264466718851860322954908450601165671659456779756729813213621619494184058523787885846028026123988768742882937560555594575382711972058675063136771607559907363473147150426072438786937801443680838000809678429661935398237704279670911327702304850361432233633878762449588995775380691751230046519525887112870087911596820425819438129628823752933484625232570811404575673486120697469433298422642918235706712683745806516963111146243583042352619458946276682671927566064412644856280974809200628570076403969102149705566234165659407896366573497351500438361942420619942340442626042843502962583972082871587354777395156158900931675553892621705766090823651992423523561977067543610850791772231446627014248480706073190780683031904427372021863648180217928606905717334324395139767598077785131512068011843007296859107657855863738316995951783526101503832838234568812936477630224116862526406481206902511209026313708255253542132975494304419894193624068882421804136403970054622890028371780866831434412547225280753151879109949869294630632823506776441053124847708188512687551830867299045244889011022873101698658557253589764536281710384140044154696351242550448902458900501159012436034893849200679230870450706164295101145874939553849033571113020685955489215042221710960985484132080888315607449968997838441183181856941426207969840045221064344285132158818835427588888625760364154210977624139072904170049364416092382046171005868764870614975861066319837401395555732726266811869692721133153485530527084537163130108111947269042314064554328656844770369609535644063901157863233885856047165043847789128124107299089495811437221203189548498465356769128685265265010781935023935240624715341541048998157346486500356086111133272220408641460912860202053049700985100455821309899816653930764806609077424691071932194756184556181155163534952112895978155645061933682871787142089892064700992072271717706195802274277720585769585493425478505663710603143308891324662609729155007858427009666151039498310756885228463896359900783581386874666630992650994317756742376407114662726098723290908944065871541984094864340569489916426237258685202610817145018914527049545628342444856958994851507940339025953033716325971849405256845582722223958135879505665988365757287114046728948698513011995083454428169145402742317735736950491174332327505643434772965719113364513387651228019054921891240216996980202178311600613752497403488412117724764550890618709535104802563357132283231987820267428172203212479801216677808008778012195328115421399004808036150837399575134185280092538496550533129955345743071489527276278703188723250944118607498091554074840659871017303853465712487984672123359108211522864110779157903974977564776130513659879435189097592112527630816260261362094744908411183373327731161220631524142087768016716143822039983108017910461099804647951537759042845792080467651702993765717126963593911953090110465809450991183453291648078664616245134598589694782613483657462428422541004490748460181623816495087712056923879430490838771561287532393864983055999491384773584614242734640369976424353520747430946955645356933781738882806338667320187107010607527022588845621874584925141810274190456086071397537977416932259009234361632732917840479461028595733411359953519406729749457450623209311079162324607220108866518270745160090652806671680177829646635211684722631558910943691345846116948026204336217672141241739626361801429781286389456924192702225184323633821281002605449174552443181626193608087972141540013968400515208652499091197736232760447839962354849584417025336610953353374586037329240681134765442732200406212872781687073934715048426923123547822655687423053677736355570080656881097906487133505723517999246382738298161876262793424074867586178841996696692860806089576401620964277443975221030264137826981587325817900007167514900769063464840238357024384741051769317790656899801303478371550563034677424995159657130459579542255920598074629172827491053586730647161357658496775916080613239050196876165794011178397192693272430075869383655682123116384312836809460793889890807985217217708253112373822996409772317223900400187330600087267113691779557925048058716609522751330363614482572221621741061218869568462085771759002170310852607757536513657650389257179546950197202356536729686890195732626544604367729007657756154892578348823529413490736725756705615930613878793376732332943064799350312683115151864162996229665785179786758189275851183443483611587107563130531317162931241929820379777893797821221206563994984886089317439525360415464532995010415774562296182212535192249066118277512203937776236425775326539291914396031830048800219828075360232217895990105021256877240046851774385166746389767368877494801183571412293551785887187778665106292027337511105593349240386077090597098539792495695102127556279543150250080664537160968256772366809699217508771267302569498110770569750316863705658458169810361678923304551034971654079843227925152655664837963382734880428777284473289336457734100930623656826872680133189310655527170136741728227042882791974619788059442854132202849993038497405404298930254078101200537019990643031955627268700790682138431510943788464584711681597633634014684590724744353004333140157013636337053091531961870136647176179756186482278167549514743547420562338966198153058715561805909341917754464502324350643341734348553334652621603415172502095486442113123738414410247475399001014888657426791686733567690042447818327450450127134394972312322558158617389825907554017801948746155482290701207968938351810300473788276410861642722192941239427461402074432920758174145985362568925404909236024193369281861240514166650484795308820421840976299858970524253221457151746498934819176125684263720779192569319210636002552040106620443989225377969937131108891348899213608335793233143868030745330581343427709238395469941203224421577502036219679313195976499608155561963585666837825727301749202150345311041914900578382603928297414467221270175324440828572805032175745229282850947474071538945707477924870619982607538333044336750669236305952126776950030607276531199151269391278277544324560526552837645913284843594697048941223660775079228253016239611962079235440950472850114748982624489576818932782736010466418101351215165521870960052521711719050227630767616871662990147895815398554484532294113527758260425584625631476302383353558591498143805438074733865392648302612569961739358601362364276229182342604082011585501185277062419937005262130160726484060034878951180113378289453148633481543870669885731315437471217450283648181302655286147425769769755642137184212459044430005816982146955225416839265289611609868768718408446320696852273190148721801793705540322055210133457464252531336862316590753433893745802007176376985429202983157396280198677364623683340511140293809223398866630780263099163704869091282531951008983770686120575921213565552905378150495866261816803848459051800291334973724176536644361619719801370482360533294569574951419186700772992067557405349978867236274761156638112333722060431704606230605060912463063865439516871235571785088069121990101118711000";
        String output = obj.removeKdigits(input, 1000);
        System.out.println(output);
    }
}
